Script started on Sun 09 Jul 2023 04:08:55 PM EDT
==114995== Memcheck, a memory error detector
==114995== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==114995== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==114995== Command: ms
==114995== 
[38;5;9mTesting Date module:[0m
13 days since ms1 was published
Current Date: 2023/07/09
Enter [38;5;13mabc: [0mabc
cin Failed
Enter [38;5;13m1000/1/1: [0m1000/1/1
Bad Year Value
Enter [38;5;13m2025/1/1: [0m2025/1/1
Bad Year Value
Enter [38;5;13m2000/13/1: [0m2000/13/1
Bad Month Value
Enter [38;5;13m2000/1/0: [0m2000/1/0
Bad Day Value
[38;5;12m------------------------------------------[0m
All the following statements must be correct: 
2023/06/26 <= 2023/06/26
2023/06/26 >= 2023/06/26
2023/06/26 <= 2023/06/26
2023/06/26 >= 2023/06/26
2023/06/26 == 2023/06/26
2023/06/26 == 2023/06/26
Days between the two dates: 0
[38;5;12m------------------------------------------[0m
All the following statements must be correct: 
2023/06/26 > 2022/06/26
2023/06/26 >= 2022/06/26
2023/06/26 > 2022/06/26
2023/06/26 >= 2022/06/26
2023/06/26 != 2022/06/26
2023/06/26 != 2022/06/26
Days between the two dates: 365
[38;5;12m------------------------------------------[0m
All the following statements must be correct: 
2023/06/26 <= 2024/06/26
2023/06/26 < 2024/06/26
2023/06/26 <= 2024/06/26
2023/06/26 < 2024/06/26
2023/06/26 != 2024/06/26
2023/06/26 != 2024/06/26
Days between the two dates: -366
[38;5;12m------------------------------------------[0m
[38;5;9mtesting Menu Module:[0m
The >< menu is empty
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x402BD4: sdds::Menu::operator<<(char const*) (Menu.cpp:120)
==114995==    by 0x40114D: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Use of uninitialised value of size 8
==114995==    at 0x402C0A: sdds::Menu::operator<<(char const*) (Menu.cpp:123)
==114995==    by 0x40114D: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x402BD4: sdds::Menu::operator<<(char const*) (Menu.cpp:120)
==114995==    by 0x40115A: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Use of uninitialised value of size 8
==114995==    at 0x402C0A: sdds::Menu::operator<<(char const*) (Menu.cpp:123)
==114995==    by 0x40115A: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x402BD4: sdds::Menu::operator<<(char const*) (Menu.cpp:120)
==114995==    by 0x401167: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Use of uninitialised value of size 8
==114995==    at 0x402C0A: sdds::Menu::operator<<(char const*) (Menu.cpp:123)
==114995==    by 0x401167: menuTester() (ms1_tester_prof.cpp:86)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x40118D: menuTester() (ms1_tester_prof.cpp:88)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Use of uninitialised value of size 8
==114995==    at 0x4F4CFD3: int std::__int_to_char<char, unsigned long>(char*, unsigned long, char const*, std::_Ios_Fmtflags, bool) (locale_facets.tcc:803)
==114995==    by 0x4F4D787: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const (locale_facets.tcc:876)
==114995==    by 0x4F5AFD5: put (locale_facets.h:2380)
==114995==    by 0x4F5AFD5: std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long) (ostream.tcc:73)
==114995==    by 0x4011D7: menuTester() (ms1_tester_prof.cpp:89)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x4F4CFE5: int std::__int_to_char<char, unsigned long>(char*, unsigned long, char const*, std::_Ios_Fmtflags, bool) (locale_facets.tcc:806)
==114995==    by 0x4F4D787: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<unsigned long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long) const (locale_facets.tcc:876)
==114995==    by 0x4F5AFD5: put (locale_facets.h:2380)
==114995==    by 0x4F5AFD5: std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long) (ostream.tcc:73)
==114995==    by 0x4011D7: menuTester() (ms1_tester_prof.cpp:89)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
The Lunch Menu is not empty and has 4 menu items.
[38;5;13m>>>>>Enter 0 and then 0 again[0m
Lunch Menu:
==114995== Conditional jump or move depends on uninitialised value(s)
==114995==    at 0x402B2A: sdds::Menu::displayEntireMenu(std::ostream&) (Menu.cpp:94)
==114995==    by 0x402B7A: sdds::Menu::run() (Menu.cpp:106)
==114995==    by 0x4012DB: menuTester() (ms1_tester_prof.cpp:98)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995== 
==114995== Invalid read of size 8
==114995==    at 0x40285E: sdds::MenuItem::operator bool() const (Menu.cpp:43)
==114995==    by 0x4028AF: sdds::MenuItem::displayContent(std::ostream&) (Menu.cpp:50)
==114995==    by 0x402B07: sdds::Menu::displayEntireMenu(std::ostream&) (Menu.cpp:96)
==114995==    by 0x402B7A: sdds::Menu::run() (Menu.cpp:106)
==114995==    by 0x4012DB: menuTester() (ms1_tester_prof.cpp:98)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==114995== 
==114995== 
==114995== Process terminating with default action of signal 11 (SIGSEGV)
==114995==  Access not within mapped region at address 0x0
==114995==    at 0x40285E: sdds::MenuItem::operator bool() const (Menu.cpp:43)
==114995==    by 0x4028AF: sdds::MenuItem::displayContent(std::ostream&) (Menu.cpp:50)
==114995==    by 0x402B07: sdds::Menu::displayEntireMenu(std::ostream&) (Menu.cpp:96)
==114995==    by 0x402B7A: sdds::Menu::run() (Menu.cpp:106)
==114995==    by 0x4012DB: menuTester() (ms1_tester_prof.cpp:98)
==114995==    by 0x401056: main (ms1_tester_prof.cpp:68)
==114995==  If you believe this happened as a result of a stack
==114995==  overflow in your program's main thread (unlikely but
==114995==  possible), you can try to increase the size of the
==114995==  main thread stack using the --main-stacksize= flag.
==114995==  The main thread stack size used in this run was 8388608.
 1- ==114995== 
==114995== HEAP SUMMARY:
==114995==     in use at exit: 91 bytes in 9 blocks
==114995==   total heap usage: 24 allocs, 15 frees, 75,799 bytes allocated
==114995== 
==114995== LEAK SUMMARY:
==114995==    definitely lost: 0 bytes in 0 blocks
==114995==    indirectly lost: 0 bytes in 0 blocks
==114995==      possibly lost: 0 bytes in 0 blocks
==114995==    still reachable: 91 bytes in 9 blocks
==114995==         suppressed: 0 bytes in 0 blocks
==114995== Rerun with --leak-check=full to see details of leaked memory
==114995== 
==114995== Use --track-origins=yes to see where uninitialised values come from
==114995== For lists of detected and suppressed errors, rerun with: -s
==114995== ERROR SUMMARY: 11 errors from 11 contexts (suppressed: 0 from 0)

Script done on Sun 09 Jul 2023 04:09:12 PM EDT
